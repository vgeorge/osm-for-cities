name: Chartpress Publish and Deploy
on: push
jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 120
    steps:
    - uses: actions/checkout@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8.3'
    - name: Setup git
      run: git config --global user.email "noreply@developmentseed.org" && git config --global user.name "Github Action"
    - name: Install Chartpress
      run: |
        pip install -v chartpress six awscli jq
    - name: Run Chartpress
      run: chartpress --push

    - name: Get latest tags for images
      if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
      run: |
        RUNNER_TAGS=$(curl -s "https://hub.docker.com/v2/repositories/developmentseed/osm-for-cities-runner/tags/" | jq -r '.results[].name')
        RUNNER_LATEST_TAG=$(echo "$RUNNER_TAGS" | sort -V | tail -n 1)
        GITEA_TAGS=$(curl -s "https://hub.docker.com/v2/repositories/developmentseed/osm-for-cities-gitea/tags/" | jq -r '.results[].name')
        GITEA_LATEST_TAG=$(echo "$GITEA_TAGS" | sort -V | tail -n 1)
        echo GITEA_LATEST_TAG=$GITEA_LATEST_TAG >> $GITHUB_ENV
        echo RUNNER_LATEST_TAG=$RUNNER_LATEST_TAG >> $GITHUB_ENV

    # values staging/develop
    - name: Staging - substitute secrets
      if: github.ref == 'refs/heads/develop'
      uses: bluwy/substitute-string-action@v1
      with:
        _input-file: 'osm-for-cities/values.staging.yaml'
        _format-key: '{{key}}'
        _output-file: 'osm-for-cities/values.staging.deploy.yaml'
        GITEA_ACCESS_TOKEN: ${{ secrets.STAGING_GITEA_ACCESS_TOKEN }}
        GITEA_LATEST_TAG: ${{ env.GITEA_LATEST_TAG }}
        RUNNER_LATEST_TAG: ${{ env.RUNNER_LATEST_TAG }}

    # values prod
    - name: Production - substitute secrets
      if: github.ref == 'refs/heads/main'
      uses: bluwy/substitute-string-action@v1
      with:
        _input-file: 'osm-for-cities/values.production.yaml'
        _format-key: '{{key}}'
        _output-file: 'osm-for-cities/values.production.deploy.yaml'
        GITEA_ACCESS_TOKEN: ${{ secrets.PRODUCTION_GITEA_ACCESS_TOKEN }}
        GITEA_LATEST_TAG: ${{ env.GITEA_LATEST_TAG }}
        RUNNER_LATEST_TAG: ${{ env.RUNNER_LATEST_TAG }}

    - name: AWS Credentials
      if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-1

    - name: Setup Kubectl and Helm Dependencies
      if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
      run: |
        sudo curl -L -o /usr/bin/kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.17.7/2020-07-08/bin/linux/amd64/kubectl &&
        sudo chmod +x /usr/bin/kubectl &&
        sudo curl -o /usr/bin/aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.17.7/2020-07-08/bin/linux/amd64/aws-iam-authenticator &&
        sudo chmod +x /usr/bin/aws-iam-authenticator &&
        wget https://get.helm.sh/helm-v3.5.0-linux-amd64.tar.gz -O helm.tar.gz &&
        tar -xvzf helm.tar.gz &&
        sudo mv linux-amd64/helm /usr/local/bin/  &&
        sudo chmod +x /usr/local/bin/helm

    - name: Update kube-config dev/staging
      if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
      run: aws eks --region us-west-1 update-kubeconfig --name ofc-production

    - name: Staging - helm deploy
      if: github.ref == 'refs/heads/develop'
      run: helm upgrade --install staging --wait ./osm-for-cities -f ./osm-for-cities/values.staging.deploy.yaml

    - name: Production - helm deploy
      if: github.ref == 'refs/heads/main'
      run: helm upgrade --install production ./osm-for-cities -f ./osm-for-cities/values.production.deploy.yaml
